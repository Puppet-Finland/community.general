---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later
- name: Remove Keycloak test realm to avoid failures from previous failed runs
  community.general.keycloak_realm:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    realm: "{{ realm }}"
    id: "{{ realm }}"
    state: absent

- name: Create Keycloak test realm
  community.general.keycloak_realm:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    realm: "{{ realm }}"
    id: "{{ realm }}"
    state: present

- name: Create custom realm key (check mode)
  community.general.keycloak_realm_key:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    name: testkey
    state: present
    parent_id: "{{ realm }}"
    config:
      private_key: "{{ realm_private_key }}"
      enabled: true
      active: true
      priority: 150
  check_mode: true
  register: result

- name: Assert that nothing has changed
  assert:
    that:
      - result is changed
      - result.end_state != {}
      - result.end_state.name == "testkey"
      - result.end_state.parentId == "realm_key_test"
      - result.end_state.providerId == "rsa"
      - result.end_state.providerType == "org.keycloak.keys.KeyProvider"
      - result.end_state.config.active == ["true"]
      - result.end_state.config.enabled == ["true"]
      - result.end_state.config.algorithm == ["RS256"]
      - result.end_state.config.priority == ["150"]
      - result.msg == "Realm key testkey would be created"

- name: Create custom realm key
  community.general.keycloak_realm_key:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    name: testkey
    state: present
    parent_id: "{{ realm }}"
    config:
      private_key: "{{ realm_private_key }}"
      enabled: true
      active: true
      priority: 150
  register: result

- name: Assert that realm key was created
  assert:
    that:
      - result is changed
      - result.end_state != {}
      - result.end_state.name == "testkey"
      - result.end_state.parentId == "realm_key_test"
      - result.end_state.providerId == "rsa"
      - result.end_state.providerType == "org.keycloak.keys.KeyProvider"
      - result.end_state.config.active == ["true"]
      - result.end_state.config.enabled == ["true"]
      - result.end_state.config.algorithm == ["RS256"]
      - result.end_state.config.priority == ["150"]
      - result.msg == "Realm key testkey created"

- name: Create custom realm key (test for idempotency)
  community.general.keycloak_realm_key:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    name: testkey
    state: present
    parent_id: "{{ realm }}"
    config:
      private_key: "{{ realm_private_key }}"
      enabled: true
      active: true
      priority: 150
  register: result

- name: Assert that nothing has changed
  assert:
    that:
      - result is not changed
      - result.end_state != {}
      - result.end_state.name == "testkey"
      - result.end_state.parentId == "realm_key_test"
      - result.end_state.providerId == "rsa"
      - result.end_state.providerType == "org.keycloak.keys.KeyProvider"
      - result.end_state.config.active == ["true"]
      - result.end_state.config.enabled == ["true"]
      - result.end_state.config.algorithm == ["RS256"]
      - result.end_state.config.priority == ["150"]
      - result.msg == "Realm key testkey was in sync"

- name: Update custom realm key (check mode)
  community.general.keycloak_realm_key:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    name: testkey
    state: present
    parent_id: "{{ realm }}"
    config:
      private_key: "{{ realm_private_key }}"
      enabled: true
      active: true
      priority: 140
  check_mode: true
  register: result

- name: Assert that nothing has changed
  assert:
    that:
      - result is changed
      - result.end_state != {}
      - result.end_state.name == "testkey"
      - result.end_state.parentId == "realm_key_test"
      - result.end_state.providerId == "rsa"
      - result.end_state.providerType == "org.keycloak.keys.KeyProvider"
      - result.end_state.config.active == ["true"]
      - result.end_state.config.enabled == ["true"]
      - result.end_state.config.algorithm == ["RS256"]
      - result.end_state.config.priority == ["140"]
      - result.msg == "Realm key testkey would be changed: config.priority ['150'] -> ['140']"

- name: Update custom realm key
  community.general.keycloak_realm_key:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    name: testkey
    state: present
    parent_id: "{{ realm }}"
    config:
      private_key: "{{ realm_private_key }}"
      enabled: true
      active: true
      priority: 140
  register: result

- name: Assert that realm key was updated
  assert:
    that:
      - result is changed
      - result.end_state != {}
      - result.end_state.name == "testkey"
      - result.end_state.parentId == "realm_key_test"
      - result.end_state.providerId == "rsa"
      - result.end_state.providerType == "org.keycloak.keys.KeyProvider"
      - result.end_state.config.active == ["true"]
      - result.end_state.config.enabled == ["true"]
      - result.end_state.config.algorithm == ["RS256"]
      - result.end_state.config.priority == ["140"]
      - result.msg == "Realm key testkey changed: config.priority ['150'] -> ['140']"

- name: Update custom realm key (test for idempotency)
  community.general.keycloak_realm_key:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    name: testkey
    state: present
    parent_id: "{{ realm }}"
    config:
      private_key: "{{ realm_private_key }}"
      enabled: true
      active: true
      priority: 140
  register: result

- name: Assert that nothing has changed
  assert:
    that:
      - result is not changed
      - result.end_state != {}
      - result.end_state.name == "testkey"
      - result.end_state.parentId == "realm_key_test"
      - result.end_state.providerId == "rsa"
      - result.end_state.providerType == "org.keycloak.keys.KeyProvider"
      - result.end_state.config.active == ["true"]
      - result.end_state.config.enabled == ["true"]
      - result.end_state.config.algorithm == ["RS256"]
      - result.end_state.config.priority == ["140"]
      - result.msg == "Realm key testkey was in sync"

- name: Remove custom realm key
  community.general.keycloak_realm_key:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    name: testkey
    state: absent
    parent_id: "{{ realm }}"
    config:
      private_key: "{{ realm_private_key }}"
  register: result

- name: Assert that realm key was deleted
  assert:
    that:
      - result is changed
      - result.end_state == {}
      - result.msg == "Realm key testkey deleted"

- name: Remove custom realm key (test for idempotency)
  community.general.keycloak_realm_key:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    name: testkey
    state: absent
    parent_id: "{{ realm }}"
    config:
      private_key: "{{ realm_private_key }}"
  register: result

- name: Assert that nothing has changed
  assert:
    that:
      - result is not changed
      - result.end_state == {}
      - result.msg == "Realm key testkey not present"

- name: Remove Keycloak test realm
  community.general.keycloak_realm:
    auth_keycloak_url: "{{ url }}"
    auth_realm: "{{ admin_realm }}"
    auth_username: "{{ admin_user }}"
    auth_password: "{{ admin_password }}"
    realm: "{{ realm }}"
    id: "{{ realm }}"
    state: absent
